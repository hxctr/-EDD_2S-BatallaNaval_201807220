# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _AdjacentList
else:
    import _AdjacentList

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Coordinates(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    next = property(_AdjacentList.Coordinates_next_get, _AdjacentList.Coordinates_next_set)
    first = property(_AdjacentList.Coordinates_first_get, _AdjacentList.Coordinates_first_set)
    last = property(_AdjacentList.Coordinates_last_get, _AdjacentList.Coordinates_last_set)
    index = property(_AdjacentList.Coordinates_index_get, _AdjacentList.Coordinates_index_set)

    def __init__(self, first, last, index):
        _AdjacentList.Coordinates_swiginit(self, _AdjacentList.new_Coordinates(first, last, index))

    def getFirst(self):
        return _AdjacentList.Coordinates_getFirst(self)

    def getLast(self):
        return _AdjacentList.Coordinates_getLast(self)

    def getindex(self):
        return _AdjacentList.Coordinates_getindex(self)
    __swig_destroy__ = _AdjacentList.delete_Coordinates

# Register Coordinates in _AdjacentList:
_AdjacentList.Coordinates_swigregister(Coordinates)

class Edge(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    content = property(_AdjacentList.Edge_content_get, _AdjacentList.Edge_content_set)
    top = property(_AdjacentList.Edge_top_get, _AdjacentList.Edge_top_set)

    def __init__(self):
        _AdjacentList.Edge_swiginit(self, _AdjacentList.new_Edge())

    def insert(self, coordinate1, coordinate2, index):
        return _AdjacentList.Edge_insert(self, coordinate1, coordinate2, index)

    def search(self, coordinate1, coordinate2, first):
        return _AdjacentList.Edge_search(self, coordinate1, coordinate2, first)
    __swig_destroy__ = _AdjacentList.delete_Edge

# Register Edge in _AdjacentList:
_AdjacentList.Edge_swigregister(Edge)

class Vertex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    next = property(_AdjacentList.Vertex_next_get, _AdjacentList.Vertex_next_set)
    coordinate = property(_AdjacentList.Vertex_coordinate_get, _AdjacentList.Vertex_coordinate_set)
    position = property(_AdjacentList.Vertex_position_get, _AdjacentList.Vertex_position_set)
    edge = property(_AdjacentList.Vertex_edge_get, _AdjacentList.Vertex_edge_set)

    def __init__(self, *args):
        _AdjacentList.Vertex_swiginit(self, _AdjacentList.new_Vertex(*args))

    def getCoordinate(self):
        return _AdjacentList.Vertex_getCoordinate(self)

    def getPosition(self):
        return _AdjacentList.Vertex_getPosition(self)

    def addEdge(self, coordinate1, coordinate2, index):
        return _AdjacentList.Vertex_addEdge(self, coordinate1, coordinate2, index)
    __swig_destroy__ = _AdjacentList.delete_Vertex

# Register Vertex in _AdjacentList:
_AdjacentList.Vertex_swigregister(Vertex)

class VertexesList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    top = property(_AdjacentList.VertexesList_top_get, _AdjacentList.VertexesList_top_set)
    content = property(_AdjacentList.VertexesList_content_get, _AdjacentList.VertexesList_content_set)
    counter = property(_AdjacentList.VertexesList_counter_get, _AdjacentList.VertexesList_counter_set)
    pos = property(_AdjacentList.VertexesList_pos_get, _AdjacentList.VertexesList_pos_set)

    def __init__(self):
        _AdjacentList.VertexesList_swiginit(self, _AdjacentList.new_VertexesList())

    def insert(self, coordinate):
        return _AdjacentList.VertexesList_insert(self, coordinate)

    def search(self, coordinate, first):
        return _AdjacentList.VertexesList_search(self, coordinate, first)

    def insertEdge(self, top, add):
        return _AdjacentList.VertexesList_insertEdge(self, top, add)

    def graphAdjacentList(self):
        return _AdjacentList.VertexesList_graphAdjacentList(self)

    def bodyStructure(self, top):
        return _AdjacentList.VertexesList_bodyStructure(self, top)

    def bodyEdge(self, top):
        return _AdjacentList.VertexesList_bodyEdge(self, top)

    def getGraph(self):
        return _AdjacentList.VertexesList_getGraph(self)

    def bodyGraph(self, top):
        return _AdjacentList.VertexesList_bodyGraph(self, top)
    __swig_destroy__ = _AdjacentList.delete_VertexesList

# Register VertexesList in _AdjacentList:
_AdjacentList.VertexesList_swigregister(VertexesList)



