# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Users
else:
    import _Users

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Users.delete_SwigPyIterator

    def value(self):
        return _Users.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Users.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Users.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Users.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Users.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Users.SwigPyIterator_copy(self)

    def next(self):
        return _Users.SwigPyIterator_next(self)

    def __next__(self):
        return _Users.SwigPyIterator___next__(self)

    def previous(self):
        return _Users.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Users.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Users.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Users.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Users.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Users.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Users.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Users.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Users:
_Users.SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Users.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Users.IntVector___nonzero__(self)

    def __bool__(self):
        return _Users.IntVector___bool__(self)

    def __len__(self):
        return _Users.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _Users.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Users.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Users.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Users.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Users.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Users.IntVector___setitem__(self, *args)

    def pop(self):
        return _Users.IntVector_pop(self)

    def append(self, x):
        return _Users.IntVector_append(self, x)

    def empty(self):
        return _Users.IntVector_empty(self)

    def size(self):
        return _Users.IntVector_size(self)

    def swap(self, v):
        return _Users.IntVector_swap(self, v)

    def begin(self):
        return _Users.IntVector_begin(self)

    def end(self):
        return _Users.IntVector_end(self)

    def rbegin(self):
        return _Users.IntVector_rbegin(self)

    def rend(self):
        return _Users.IntVector_rend(self)

    def clear(self):
        return _Users.IntVector_clear(self)

    def get_allocator(self):
        return _Users.IntVector_get_allocator(self)

    def pop_back(self):
        return _Users.IntVector_pop_back(self)

    def erase(self, *args):
        return _Users.IntVector_erase(self, *args)

    def __init__(self, *args):
        _Users.IntVector_swiginit(self, _Users.new_IntVector(*args))

    def push_back(self, x):
        return _Users.IntVector_push_back(self, x)

    def front(self):
        return _Users.IntVector_front(self)

    def back(self):
        return _Users.IntVector_back(self)

    def assign(self, n, x):
        return _Users.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _Users.IntVector_resize(self, *args)

    def insert(self, *args):
        return _Users.IntVector_insert(self, *args)

    def reserve(self, n):
        return _Users.IntVector_reserve(self, n)

    def capacity(self):
        return _Users.IntVector_capacity(self)
    __swig_destroy__ = _Users.delete_IntVector

# Register IntVector in _Users:
_Users.IntVector_swigregister(IntVector)

class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Users.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Users.StringVector___nonzero__(self)

    def __bool__(self):
        return _Users.StringVector___bool__(self)

    def __len__(self):
        return _Users.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _Users.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Users.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Users.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Users.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Users.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Users.StringVector___setitem__(self, *args)

    def pop(self):
        return _Users.StringVector_pop(self)

    def append(self, x):
        return _Users.StringVector_append(self, x)

    def empty(self):
        return _Users.StringVector_empty(self)

    def size(self):
        return _Users.StringVector_size(self)

    def swap(self, v):
        return _Users.StringVector_swap(self, v)

    def begin(self):
        return _Users.StringVector_begin(self)

    def end(self):
        return _Users.StringVector_end(self)

    def rbegin(self):
        return _Users.StringVector_rbegin(self)

    def rend(self):
        return _Users.StringVector_rend(self)

    def clear(self):
        return _Users.StringVector_clear(self)

    def get_allocator(self):
        return _Users.StringVector_get_allocator(self)

    def pop_back(self):
        return _Users.StringVector_pop_back(self)

    def erase(self, *args):
        return _Users.StringVector_erase(self, *args)

    def __init__(self, *args):
        _Users.StringVector_swiginit(self, _Users.new_StringVector(*args))

    def push_back(self, x):
        return _Users.StringVector_push_back(self, x)

    def front(self):
        return _Users.StringVector_front(self)

    def back(self):
        return _Users.StringVector_back(self)

    def assign(self, n, x):
        return _Users.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _Users.StringVector_resize(self, *args)

    def insert(self, *args):
        return _Users.StringVector_insert(self, *args)

    def reserve(self, n):
        return _Users.StringVector_reserve(self, n)

    def capacity(self):
        return _Users.StringVector_capacity(self)
    __swig_destroy__ = _Users.delete_StringVector

# Register StringVector in _Users:
_Users.StringVector_swigregister(StringVector)

NOT_FOUND = _Users.NOT_FOUND
class ItemNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_Users.ItemNode_id_get, _Users.ItemNode_id_set)
    next = property(_Users.ItemNode_next_get, _Users.ItemNode_next_set)

    def __init__(self, id):
        _Users.ItemNode_swiginit(self, _Users.new_ItemNode(id))

    def getId(self):
        return _Users.ItemNode_getId(self)
    __swig_destroy__ = _Users.delete_ItemNode

# Register ItemNode in _Users:
_Users.ItemNode_swigregister(ItemNode)

class ItemsList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    start = property(_Users.ItemsList_start_get, _Users.ItemsList_start_set)

    def __init__(self):
        _Users.ItemsList_swiginit(self, _Users.new_ItemsList())

    def insertInfo(self, id):
        return _Users.ItemsList_insertInfo(self, id)

    def printlk(self):
        return _Users.ItemsList_printlk(self)

    def get_start(self):
        return _Users.ItemsList_get_start(self)
    __swig_destroy__ = _Users.delete_ItemsList

# Register ItemsList in _Users:
_Users.ItemsList_swigregister(ItemsList)

class UsersNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_Users.UsersNode_id_get, _Users.UsersNode_id_set)
    nick = property(_Users.UsersNode_nick_get, _Users.UsersNode_nick_set)
    password = property(_Users.UsersNode_password_get, _Users.UsersNode_password_set)
    monedas = property(_Users.UsersNode_monedas_get, _Users.UsersNode_monedas_set)
    edad = property(_Users.UsersNode_edad_get, _Users.UsersNode_edad_set)
    linked_list = property(_Users.UsersNode_linked_list_get, _Users.UsersNode_linked_list_set)
    next = property(_Users.UsersNode_next_get, _Users.UsersNode_next_set)

    def __init__(self, id, nick, password, monedas, edad, linked_list):
        _Users.UsersNode_swiginit(self, _Users.new_UsersNode(id, nick, password, monedas, edad, linked_list))

    def setLinkedList(self, newlist):
        return _Users.UsersNode_setLinkedList(self, newlist)

    def setId(self, id):
        return _Users.UsersNode_setId(self, id)

    def setNick(self, nick):
        return _Users.UsersNode_setNick(self, nick)

    def setPassword(self, password):
        return _Users.UsersNode_setPassword(self, password)

    def setMonedas(self, monedas):
        return _Users.UsersNode_setMonedas(self, monedas)

    def getMonedas(self):
        return _Users.UsersNode_getMonedas(self)

    def setEdad(self, edad):
        return _Users.UsersNode_setEdad(self, edad)
    __swig_destroy__ = _Users.delete_UsersNode

# Register UsersNode in _Users:
_Users.UsersNode_swigregister(UsersNode)

class UsersList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    start = property(_Users.UsersList_start_get, _Users.UsersList_start_set)

    def __init__(self):
        _Users.UsersList_swiginit(self, _Users.new_UsersList())

    def insert(self, id, nick, password, monedas, edad, linked_list):
        return _Users.UsersList_insert(self, id, nick, password, monedas, edad, linked_list)

    def _print(self):
        return _Users.UsersList__print(self)

    def setNewLinkedList(self, nick, newlist):
        return _Users.UsersList_setNewLinkedList(self, nick, newlist)

    def tokensActuales(self, nick):
        return _Users.UsersList_tokensActuales(self, nick)

    def setNewTokensWhenWinner(self, nick, monedas):
        return _Users.UsersList_setNewTokensWhenWinner(self, nick, monedas)

    def askSetNewTokensWhenBuying(self, nick, monedas):
        return _Users.UsersList_askSetNewTokensWhenBuying(self, nick, monedas)

    def sendIdsToPY(self):
        return _Users.UsersList_sendIdsToPY(self)

    def sendNicksToPY(self):
        return _Users.UsersList_sendNicksToPY(self)

    def sendPasswordsToPY(self):
        return _Users.UsersList_sendPasswordsToPY(self)

    def sendAgesToPY(self):
        return _Users.UsersList_sendAgesToPY(self)

    def bubblesortDown(self):
        return _Users.UsersList_bubblesortDown(self)

    def bubblesortUp(self):
        return _Users.UsersList_bubblesortUp(self)

    def getLk(self, id):
        return _Users.UsersList_getLk(self, id)

    def getLkByName(self, nick):
        return _Users.UsersList_getLkByName(self, nick)

    def logUser(self, nick, password):
        return _Users.UsersList_logUser(self, nick, password)

    def setNewData(self, nick_to_search, nick, password, edad):
        return _Users.UsersList_setNewData(self, nick_to_search, nick, password, edad)

    def deleteUser(self, id):
        return _Users.UsersList_deleteUser(self, id)
    __swig_destroy__ = _Users.delete_UsersList

# Register UsersList in _Users:
_Users.UsersList_swigregister(UsersList)



