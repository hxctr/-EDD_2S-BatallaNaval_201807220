# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ALVTree
else:
    import _ALVTree

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Info(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_ALVTree.Info_id_get, _ALVTree.Info_id_set)

    def __init__(self, id):
        _ALVTree.Info_swiginit(self, _ALVTree.new_Info(id))
    __swig_destroy__ = _ALVTree.delete_Info

# Register Info in _ALVTree:
_ALVTree.Info_swigregister(Info)

class NodoAVL(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    info = property(_ALVTree.NodoAVL_info_get, _ALVTree.NodoAVL_info_set)
    height = property(_ALVTree.NodoAVL_height_get, _ALVTree.NodoAVL_height_set)
    left = property(_ALVTree.NodoAVL_left_get, _ALVTree.NodoAVL_left_set)
    right = property(_ALVTree.NodoAVL_right_get, _ALVTree.NodoAVL_right_set)

    def __init__(self, info):
        _ALVTree.NodoAVL_swiginit(self, _ALVTree.new_NodoAVL(info))
    __swig_destroy__ = _ALVTree.delete_NodoAVL

# Register NodoAVL in _ALVTree:
_ALVTree.NodoAVL_swigregister(NodoAVL)

class AVLTree(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    root = property(_ALVTree.AVLTree_root_get, _ALVTree.AVLTree_root_set)
    contador = property(_ALVTree.AVLTree_contador_get, _ALVTree.AVLTree_contador_set)

    def __init__(self):
        _ALVTree.AVLTree_swiginit(self, _ALVTree.new_AVLTree())

    def height(self, n):
        return _ALVTree.AVLTree_height(self, n)

    def maximo(self, a, b):
        return _ALVTree.AVLTree_maximo(self, a, b)

    def rotacionDerecha(self, y):
        return _ALVTree.AVLTree_rotacionDerecha(self, y)

    def rotacionIzquierda(self, x):
        return _ALVTree.AVLTree_rotacionIzquierda(self, x)

    def obtenerFE(self, n):
        return _ALVTree.AVLTree_obtenerFE(self, n)

    def addToTree(self, info):
        return _ALVTree.AVLTree_addToTree(self, info)

    def insertarNodo(self, raiz, info):
        return _ALVTree.AVLTree_insertarNodo(self, raiz, info)

    def graphTree(self):
        return _ALVTree.AVLTree_graphTree(self)

    def graficaRamas(self, archivo, raiz):
        return _ALVTree.AVLTree_graficaRamas(self, archivo, raiz)

    def sucesor(self, nodo):
        return _ALVTree.AVLTree_sucesor(self, nodo)
    __swig_destroy__ = _ALVTree.delete_AVLTree

# Register AVLTree in _ALVTree:
_ALVTree.AVLTree_swigregister(AVLTree)



