# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _btree
else:
    import _btree

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


null = _btree.null
class NodoB(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_btree.NodoB_id_get, _btree.NodoB_id_set)
    siguiente = property(_btree.NodoB_siguiente_get, _btree.NodoB_siguiente_set)
    anterior = property(_btree.NodoB_anterior_get, _btree.NodoB_anterior_set)
    derecha = property(_btree.NodoB_derecha_get, _btree.NodoB_derecha_set)
    izquierda = property(_btree.NodoB_izquierda_get, _btree.NodoB_izquierda_set)

    def __init__(self, valor):
        _btree.NodoB_swiginit(self, _btree.new_NodoB(valor))
    __swig_destroy__ = _btree.delete_NodoB

# Register NodoB in _btree:
_btree.NodoB_swigregister(NodoB)

class ArbolB(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    orden_arbol = property(_btree.ArbolB_orden_arbol_get, _btree.ArbolB_orden_arbol_set)
    raiz = property(_btree.ArbolB_raiz_get, _btree.ArbolB_raiz_set)

    def __init__(self):
        _btree.ArbolB_swiginit(self, _btree.new_ArbolB())

    def insertar(self, id):
        return _btree.ArbolB_insertar(self, id)

    def insertarCrearRama(self, nodo, rama):
        return _btree.ArbolB_insertarCrearRama(self, nodo, rama)

    def dividir(self, rama):
        return _btree.ArbolB_dividir(self, rama)

    def insertarEnRama(self, primero, nuevo):
        return _btree.ArbolB_insertarEnRama(self, primero, nuevo)

    def esHoja(self, primero):
        return _btree.ArbolB_esHoja(self, primero)

    def contador(self, primero):
        return _btree.ArbolB_contador(self, primero)

    def Grafo(self):
        return _btree.ArbolB_Grafo(self)

    def GrafoArbolAbb(self, rama):
        return _btree.ArbolB_GrafoArbolAbb(self, rama)

    def GrafoRamas(self, rama):
        return _btree.ArbolB_GrafoRamas(self, rama)

    def GrafoConexionRamas(self, rama):
        return _btree.ArbolB_GrafoConexionRamas(self, rama)
    __swig_destroy__ = _btree.delete_ArbolB

# Register ArbolB in _btree:
_btree.ArbolB_swigregister(ArbolB)



